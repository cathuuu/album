scalar DateTime

union FileSystemItem = FolderDocument | MediaDocument

type UserDocument {
    id: ID
    username: String
    password: String
    fullName: String
    gender: String
    dob: DateTime
    email: String
    phone: String
    statusUser: String
    createdAt: String
    updatedAt: String
}

input CreateUserInput {
    username: String!
    password: String!
    fullName: String
    gender: String
    dob: DateTime
    email: String
    phone: String
}

type FolderDocument {
    id: ID
    user: User
    name: String!
    parentFolder: FolderDocument
    coverUrl: String
    isShared: Boolean
    isDeleted: Boolean
    createdAt: String
    updatedAt: String
}

type User {
    id: ID
    username: String
    email: String
}

input FolderInput {
    id: ID
    userId: ID!
    name: String!
    parentFolderId: ID
    coverUrl: String
    isShared: Boolean
    isDeleted: Boolean
}

type FolderShareDocument {
    id: ID
    folder: FolderDocument
    sharedWith: User
    sharedBy: User
    permission: String
    createdAt: String
    updatedAt: String
}

input FolderShareInput {
    id: ID
    folderId: ID!
    sharedWithId: ID!
    sharedById: ID!
    permission: String!
}

type MediaDocument {
    id: ID
    user: User
    folder: FolderDocument
    type: String
    url: String
    filename: String
    mimeType: String
    size: Float
    isDeleted: Boolean
    createdAt: String
    updatedAt: String
    photoMeta: PhotoMeta
    videoMeta: VideoMeta
    likeCount: Int
}

type PhotoMeta {
    cameraModel: String
    iso: Int
    aperture: String
}

type VideoMeta {
    duration: Int
    resolution: String
    frameRate: Int
}


type MediaLikeDocument {
    id: ID
    media: MediaDocument
    user: User
    createdAt: String
}

input MediaLikeInput {
    id: ID
    mediaId: ID!
    userId: ID!
}

type MediaShareDocument {
    id: ID
    media: MediaDocument
    sharedWith: User
    sharedBy: User
    permission: String
    createdAt: String
    updatedAt: String
}

input MediaShareInput {
    id: ID
    mediaId: ID!
    sharedWithId: ID!
    sharedById: ID!
    permission: String!
}

type PermissionDocument {
    id: ID
    permissionName: String
    createdAt: String
    updatedAt: String
}

input PermissionInput {
    id: ID
    permissionName: String!
}

type RoleDocument {
    id: ID
    roleName: String
    permissions: [PermissionDocument]
    createdAt: String
    updatedAt: String
}

type Mutation {
    createUser(user: CreateUserInput!): UserDocument

    createFolder(folderDocument: FolderInput): FolderDocument
    updateFolder(folderDocument: FolderInput!): FolderDocument
    deleteFolder(id: ID!): Boolean

    createShareFolder(folderShareDocument: FolderShareInput!): FolderShareDocument
    updateShareFolder(folderShareDocument: FolderShareInput!): FolderShareDocument
    deleteShareFolder(id: ID!): Boolean

    createMediaLike(mediaLikeDocument: MediaLikeInput!): MediaLikeDocument
    deleteMediaLike(id: ID!): Boolean

    createMediaShare(mediaShareDocument: MediaShareInput!): MediaShareDocument
    updateMediaShare(mediaShareDocument: MediaShareInput!): MediaShareDocument
    deleteMediaShare(id: ID!): Boolean

    createPermission(permissionDocument: PermissionInput!): PermissionDocument
    updatePermission(permissionDocument: PermissionInput!): PermissionDocument
    deletePermission(id: ID!): Boolean

    createRole(roleName: String!, permissionIds: [ID!]): RoleDocument
    updateRole(id: ID!, roleName: String, permissionIds: [ID!]): RoleDocument
    deleteRole(id: ID!): Boolean
}

type Query{
    rootItems(userId: ID!): [FileSystemItem]
    getFolderContents(folderId: ID!): [FileSystemItem]
}
