scalar DateTime

# ===================== UNION =====================
union FileSystemItem = FolderDocument | MediaDocument



# ===================== USER =====================
type UserDocument {
    id: ID!
    username: String!
    password: String!
    fullName: String
    gender: String
    dob: DateTime
    roleIds: [ID!]
    email: String
    phone: String
    statusUser: String
    createdAt: DateTime
    updatedAt: DateTime
}

input CreateUserInput {
    username: String!
    password: String!
    fullName: String
    gender: String
    dob: DateTime
    roleIds: [ID!]
    email: String
    phone: String
}

input UpdateUserInput {
    id: ID!
    username: String
    fullName: String
    gender: String
    dob: DateTime
    roleIds: [ID!]
    email: String
    phone: String
    statusUser: String
}

# ===================== FOLDER =====================
type FolderDocument {
    id: ID
    ownerId: UserDocument
    name: String!
    parentId: ID
    coverUrl: String
    isShared: Boolean
    path: String
    isDeleted: Boolean
    createdAt: DateTime
    updatedAt: DateTime
}

input FolderInput {
    id: ID
    ownerId: ID!
    name: String!
    parentId: ID
    coverUrl: String
    path: String
    isShared: Boolean
    isDeleted: Boolean
}

# ===================== FOLDER SHARE =====================
type FolderShareDocument {
    id: ID
    folder: FolderDocument
    sharedWith: UserDocument
    sharedBy: UserDocument
    permission: [String!]! # ["VIEW", "EDIT", "DELETE"]
    createdAt: DateTime
    updatedAt: DateTime
}

input FolderShareInput {
    id: ID
    folderId: ID!
    sharedWithId: ID!
    sharedById: ID!
    permission: [String!]!
}

# ===================== MEDIA =====================
type MediaDocument {
    id: ID
    owner: UserDocument
    folder: FolderDocument
    type: String
    url: String
    filename: String
    mimeType: String
    size: Float
    isDeleted: Boolean
    createdAt: DateTime
    updatedAt: DateTime
    photoMeta: PhotoMeta
    videoMeta: VideoMeta
    likeCount: Int
}

type PhotoMeta {
    cameraModel: String
    iso: Int
    aperture: String
}

type VideoMeta {
    duration: Int
    resolution: String
    frameRate: Int
}

# ===================== MEDIA LIKE =====================
type MediaLikeDocument {
    id: ID!
    media: MediaDocument!
    user: UserDocument!
    createdAt: DateTime
}

input MediaLikeInput {
    id: ID
    mediaId: ID!
    userId: ID!
}

# ===================== MEDIA SHARE =====================
type MediaShareDocument {
    id: ID!
    media: MediaDocument!
    sharedWith: UserDocument!
    sharedBy: UserDocument!
    permission: [String!]!
    createdAt: DateTime
    updatedAt: DateTime
}

input MediaShareInput {
    id: ID
    mediaId: ID!
    sharedWithId: ID!
    sharedById: ID!
    permission: [String!]!
}

# ===================== PERMISSION =====================
type PermissionDocument {
    id: ID!
    permissionName: String!
    createdAt: DateTime
    updatedAt: DateTime
}

input PermissionInput {
    id: ID
    permissionName: String!
}

# ===================== ROLE =====================
type RoleDocument {
    id: ID!
    roleName: String!
    permissions: [PermissionDocument!]!
    createdAt: DateTime
    updatedAt: DateTime
}

input RoleInput {
    id: ID
    roleName: String!
    permissionIds: [ID!]!
}

# ===================== QUERY =====================
type Query {
    # File system
    rootItems(userId: ID!): [FileSystemItem]
    getFolderContents(folderId: ID!): [FileSystemItem]
    getDeletedItems(userId: ID!): [FileSystemItem]

    # Folder
    getFolder(id: ID!): FolderDocument
    getAllFolders: [FolderDocument]

    # Folder share
    findFolderSharesWith(shareWith: ID!): [FolderShareDocument]
    findFolderSharesBy(shareBy: ID!): [FolderShareDocument]

    # Media share
    findMediaShareWith(shareWith: ID!): [MediaShareDocument]
    findMediaShareBy(shareBy: ID!): [MediaShareDocument]

    # Media like
    findAllByUserId(userId: ID!): [MediaLikeDocument]

}

# ===================== MUTATION =====================
type Mutation {
    # User
    createUser(input: CreateUserInput!): UserDocument
    updateUser(input: UpdateUserInput!): UserDocument
    deleteUser(id: ID!): Boolean

    # Folder
    createFolder(input: FolderInput!): FolderDocument
    updateFolder(input: FolderInput!): FolderDocument
    deleteFolder(id: ID!): Boolean

    # Folder share
    createShareFolder(input: FolderShareInput!): FolderShareDocument
    updateShareFolder(input: FolderShareInput!): FolderShareDocument
    deleteShareFolder(id: ID!): Boolean

    # Media like
    createMediaLike(input: MediaLikeInput!): MediaLikeDocument
    deleteMediaLike(id: ID!): Boolean

    # Media share
    createMediaShare(input: MediaShareInput!): MediaShareDocument
    updateMediaShare(input: MediaShareInput!): MediaShareDocument
    deleteMediaShare(id: ID!): Boolean

    # Permission
    createPermission(input: PermissionInput!): PermissionDocument
    updatePermission(input: PermissionInput!): PermissionDocument
    deletePermission(id: ID!): Boolean

    # Role
    createRole(input: RoleInput!): RoleDocument
    updateRole(input: RoleInput!): RoleDocument
    deleteRole(id: ID!): Boolean
}
