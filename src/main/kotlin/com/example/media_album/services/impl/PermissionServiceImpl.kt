package com.example.media_album.services.impl

import com.example.media_album.codegen.types.PermissionInput
import com.example.media_album.models.documents.PermissionDocument
import com.example.media_album.models.documents.FolderShareDocument
import com.example.media_album.repositories.*
import com.example.media_album.services.PermissionService
import com.example.media_album.utils.getByIdOrThrow
import org.bson.types.ObjectId
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import java.time.Instant
import kotlin.collections.emptyList

@Service
class PermissionServiceImpl(
    repo: PermissionRepository,
    private val userRepository: UserRepository,
    private val roleRepository: RoleRepository,
    private val folderShareRepository: FolderShareRepository,
    private val mediaShareRepository: MediaShareRepository,
    private val mediaRepository: MediaRepository,
    private val folderRepository: FolderRepository,
    private val permissionRepository: PermissionRepository
) : CommonServiceImpl<PermissionDocument, ObjectId, PermissionRepository>(repo),
    PermissionService {

    // ===================================================
    // üîπ CRUD c∆° b·∫£n
    // ===================================================

    override fun updatePermission(permissionDocument: PermissionInput): PermissionDocument {
        val id = permissionDocument.id ?: throw IllegalArgumentException("Permission ID is required!")
        val existing = repo.getByIdOrThrow(id, "Permission")
        val updated = existing.copy(
            permissionName = permissionDocument.permissionName,
            updatedAt = Instant.now()
        )
        return repo.save(updated)
    }

    override fun createPermission(permissionDocument: PermissionInput): PermissionDocument {
        val newPermission = PermissionDocument(
            permissionName = permissionDocument.permissionName
        )
        return repo.save(newPermission)
    }

    // ===================================================
    // üîπ PH√ÇN QUY·ªÄN N√ÇNG CAO
    // ===================================================

    /**
     * ‚úÖ Check t·ªïng h·ª£p quy·ªÅn:
     * 1Ô∏è‚É£ ADMIN ho·∫∑c ROLE c√≥ quy·ªÅn ALL ‚Üí true
     * 2Ô∏è‚É£ Owner c·ªßa media ‚Üí true
     * 3Ô∏è‚É£ MediaShare tr·ª±c ti·∫øp ‚Üí true
     * 4Ô∏è‚É£ FolderShare (c√≥ k·∫ø th·ª´a, c√≥ deny) ‚Üí true/false
     * 5Ô∏è‚É£ M·∫∑c ƒë·ªãnh ‚Üí false
     */
    override fun checkPermission(
        userId: ObjectId,
        mediaId: ObjectId,
        requiredPermission: String
    ): Boolean {
        val user = userRepository.findById(userId).orElse(null) ?: return false
        val roles = if (user.roleIds.isNotEmpty()) roleRepository.findAllById(user.roleIds) else emptyList()

        // Gom t·∫•t c·∫£ permissionId t·ª´ c√°c role
        val permissionIds = roles.flatMap { it.permissions }
            .filter { it.isNotBlank() }
            .map { ObjectId(it) } // Chuy·ªÉn t·ª´ String sang ObjectId

        // Truy v·∫•n th·ª±c t·∫ø ƒë·ªÉ l·∫•y danh s√°ch quy·ªÅn
        val permissions = if (permissionIds.isNotEmpty())
            permissionRepository.findAllById(permissionIds)
        else
            emptyList()

        // L·∫•y danh s√°ch t√™n quy·ªÅn (·ªü ƒë√¢y v√≠ d·ª• d√πng id ho·∫∑c field name)
        val rolePermissions = permissions.map { it.id!!.toHexString().uppercase() }.distinct()

        // N·∫øu c√≥ quy·ªÅn ALL ho·∫∑c ƒë√∫ng quy·ªÅn y√™u c·∫ßu th√¨ pass
        if ("ALL" in rolePermissions || requiredPermission.uppercase() in rolePermissions)
            return true

        // ===== 2Ô∏è‚É£ Ki·ªÉm tra quy·ªÅn Owner =====
        val media = mediaRepository.findById(mediaId).orElse(null) ?: return false
        if (media.user == userId) return true

        // ===== 3Ô∏è‚É£ Ki·ªÉm tra quy·ªÅn chia s·∫ª tr·ª±c ti·∫øp tr√™n media =====
        val directShare = mediaShareRepository.findByMediaAndSharedWith(mediaId, userId)
        if (directShare != null) {
            // N·∫øu c√≥ DENY tr∆∞·ªõc th√¨ ch·∫∑n lu√¥n
            if (directShare.permission.any { it.equals("DENY_${requiredPermission.uppercase()}", true) })
                return false
            if (directShare.permission.any { it.equals(requiredPermission, true) })
                return true
        }

        // ===== 4Ô∏è‚É£ Ki·ªÉm tra quy·ªÅn k·∫ø th·ª´a t·ª´ folder =====
        val folderId = media.folder ?: return false
        return hasFolderInheritedPermission(userId, folderId, requiredPermission)
    }

    /**
     * ‚úÖ Ki·ªÉm tra quy·ªÅn k·∫ø th·ª´a theo c√¢y folder
     * - D·ª´ng khi g·∫∑p quy·ªÅn tr·ª±c ti·∫øp (inherited = false)
     * - N·∫øu c√≥ DENY ‚Üí ch·∫∑n lu√¥n
     * - N·∫øu kh√¥ng c√≥ ‚Üí ti·∫øp t·ª•c ki·ªÉm tra cha
     */
    override fun hasFolderInheritedPermission(
        userId: ObjectId,
        folderId: ObjectId?,
        permission: String
    ): Boolean {
        val visited = mutableSetOf<ObjectId>() // tr√°nh v√≤ng l·∫∑p
        var currentFolderId = folderId

        while (currentFolderId != null) {
            // NgƒÉn v√≤ng tham chi·∫øu
            if (!visited.add(currentFolderId)) {
                throw IllegalStateException("Circular folder reference detected at folder: $currentFolderId")
            }

            val share = folderShareRepository.findByFolderAndSharedWith(currentFolderId, userId)

            // N·∫øu c√≥ quy·ªÅn DENY ‚Üí ch·∫∑n ngay
            if (share?.permission?.any { it.equals("DENY_${permission.uppercase()}", true) } == true)
                return false

            // N·∫øu c√≥ quy·ªÅn tr·ª±c ti·∫øp (inherited = false)
            if (share != null && !share.inherited) {
                return share.permission.any { it.equals(permission, true) }
            }

            // N·∫øu c√≥ quy·ªÅn k·∫ø th·ª´a (inherited = true)
            if (share?.permission?.any { it.equals(permission, true) } == true)
                return true

            // Truy l√™n folder cha
            val parent = folderRepository.findById(currentFolderId).orElse(null)
            currentFolderId = parent?.parentId
        }

        return false
    }


    @Transactional
    override fun inheritPermissionsFromFolder(
        parentId: ObjectId,
        sharedBy: ObjectId,
        sharedWith: ObjectId,
        permissions: List<String>
    ) {
        val subFolders = folderRepository.findByParentId(parentId)

        for (subFolder in subFolders) {
            // 2Ô∏è‚É£ N·∫øu folder con ch∆∞a c√≥ quy·ªÅn ri√™ng th√¨ t·∫°o b·∫£n ghi k·∫ø th·ª´a
            val existingShare = folderShareRepository.findByFolderAndSharedWith(subFolder.id!!, sharedWith)

            if (existingShare == null) {
                val inheritedShare = FolderShareDocument(
                    folder = subFolder.id,
                    sharedBy = sharedBy,
                    sharedWith = sharedWith,
                    permission = permissions,
                    inherited = true // ‚úÖ ƒê√°nh d·∫•u l√† quy·ªÅn k·∫ø th·ª´a
                )
                folderShareRepository.save(inheritedShare)
            }

            // 3Ô∏è‚É£ ƒê·ªá quy xu·ªëng t·∫ßng con
            inheritPermissionsFromFolder(subFolder.id, sharedBy, sharedWith, permissions)
        }
    }

    /**
     * ‚úÖ √Åp d·ª•ng quy·ªÅn k·∫ø th·ª´a cho c√°c folder con (ƒë·ªá quy an to√†n)
     * - Ch·ªâ t·∫°o n·∫øu folder con ch∆∞a c√≥ share ri√™ng
     * - C√≥ ki·ªÉm tra v√≤ng l·∫∑p
     */
    override fun applyInheritedPermission(
        folderId: ObjectId,
        sharedBy: ObjectId,
        sharedWith: ObjectId,
        permissions: List<String>,
        visited: MutableSet<ObjectId>
    ) {
        if (!visited.add(folderId)) return // tr√°nh v√≤ng l·∫∑p

        val subFolders = folderRepository.findByParentId(folderId)
        for (sub in subFolders) {
            val exists = folderShareRepository.findByFolderAndSharedWith(sub.id!!, sharedWith)
            if (exists == null) {
                val newShare = FolderShareDocument(
                    folder = sub.id,
                    sharedBy = sharedBy,
                    sharedWith = sharedWith,
                    inherited = true,
                    permission = permissions
                )
                folderShareRepository.save(newShare)
            }
            // ƒê·ªá quy xu·ªëng t·∫ßng con
            applyInheritedPermission(sub.id, sharedBy, sharedWith, permissions, visited)
        }
    }

    /**
     * ‚úÖ Thu h·ªìi quy·ªÅn k·∫ø th·ª´a khi folder cha b·ªã thu h·ªìi
     * - Ch·ªâ x√≥a quy·ªÅn c√≥ inherited = true
     * - ƒê·ªá quy xu·ªëng t·∫ßng con
     */
    override fun revokeInheritedPermission(folderId: ObjectId, sharedWith: ObjectId, visited: MutableSet<ObjectId>) {
        if (!visited.add(folderId)) return

        val subFolders = folderRepository.findByParentId(folderId)
        for (sub in subFolders) {
            val share = folderShareRepository.findByFolderAndSharedWith(sub.id!!, sharedWith)
            if (share != null && share.inherited) {
                folderShareRepository.delete(share)
            }
            revokeInheritedPermission(sub.id, sharedWith, visited)
        }
    }
}
